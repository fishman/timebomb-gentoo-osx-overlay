diff --git a/ld/InputFiles.cpp b/ld/InputFiles.cpp
index 7bf136b..bf215b7 100644
--- a/ld/InputFiles.cpp
+++ b/ld/InputFiles.cpp
@@ -58,7 +58,9 @@
 #include "macho_relocatable_file.h"
 #include "macho_dylib_file.h"
 #include "archive_file.h"
+#ifdef LTO
 #include "lto_file.h"
+#endif
 #include "opaque_section_file.h"
 #include "Snapshot.h"
 
@@ -181,9 +183,11 @@ const char* InputFiles::fileArch(const uint8_t* p, unsigned len)
 	if ( result != NULL  )
 		 return result;
 		 
+#ifdef LTO
 	result = lto::archName(p, len);
 	if ( result != NULL  )
 		 return result;
+#endif
 	
 	if ( strncmp((const char*)p, "!<arch>\n", 8) == 0 )
 		return "archive";
@@ -282,6 +286,7 @@ ld::File* InputFiles::makeFile(const Options::FileInfo& info, bool indirectDylib
 		return objResult;
 	}
 
+#ifdef LTO
 	// see if it is an llvm object file
 	objResult = lto::parse(p, len, info.path, info.modTime, info.ordinal, _options.architecture(), _options.subArchitecture(), _options.logAllFiles());
 	if ( objResult != NULL ) {
@@ -289,6 +294,7 @@ ld::File* InputFiles::makeFile(const Options::FileInfo& info, bool indirectDylib
 		OSAtomicIncrement32(&_totalObjectLoaded);
 		return objResult;
 	}
+#endif
 	
 	// see if it is a dynamic library
 	ld::dylib::File* dylibResult = mach_o::dylib::parse(p, len, info.path, info.modTime, _options, info.ordinal, info.options.fBundleLoader, indirectDylib);
@@ -312,6 +318,7 @@ ld::File* InputFiles::makeFile(const Options::FileInfo& info, bool indirectDylib
 		return archiveResult;
 	}
 	
+#ifdef LTO
 	// does not seem to be any valid linker input file, check LTO misconfiguration problems
 	if ( lto::archName((uint8_t*)p, len) != NULL ) {
 		if ( lto::libLTOisLoaded() ) {
@@ -339,6 +346,7 @@ ld::File* InputFiles::makeFile(const Options::FileInfo& info, bool indirectDylib
 			throwf("could not process llvm bitcode object file, because %s could not be loaded", libLTO);
 		}
 	}
+#endif
 
 	// error handling
 	if ( ((fat_header*)p)->magic == OSSwapBigToHostInt32(FAT_MAGIC) ) {
diff --git a/ld/Options.cpp b/ld/Options.cpp
index 0131911..6dcef14 100644
--- a/ld/Options.cpp
+++ b/ld/Options.cpp
@@ -42,10 +42,14 @@
 #include "MachOFileAbstraction.hpp"
 #include "Snapshot.h"
 
+
+#define ALL_SUPPORTED_ARCHS "x86_64 i386"
+#ifdef LTO
 // upward dependency on lto::version()
 namespace lto {
 	extern const char* version();
 }
+#endif
 
 // magic to place command line in crash reports
 const int crashreporterBufferSize = 2000;
@@ -2894,10 +2898,12 @@ void Options::buildSearchPaths(int argc, const char* argv[])
 			fprintf(stderr, "configured to support archs: %s\n", ALL_SUPPORTED_ARCHS);
 			 // if only -v specified, exit cleanly
 			 if ( argc == 2 ) {
+#ifdef LTO
 				const char* ltoVers = lto::version();
 				if ( ltoVers != NULL )
 					fprintf(stderr, "LTO support using: %s\n", ltoVers);
 				exit(0);
+#endif
 			}
 		}
 		else if ( strcmp(argv[i], "-syslibroot") == 0 ) {
diff --git a/ld/Resolver.cpp b/ld/Resolver.cpp
index ad4b22d..2bb7ebd 100644
--- a/ld/Resolver.cpp
+++ b/ld/Resolver.cpp
@@ -56,7 +56,9 @@
 #include "InputFiles.h"
 #include "SymbolTable.h"
 #include "Resolver.h"
+#ifdef LTO
 #include "parsers/lto_file.h"
+#endif
 
 
 namespace ld {
@@ -1321,6 +1323,7 @@ void Resolver::removeCoalescedAwayAtoms()
 
 void Resolver::linkTimeOptimize()
 {
+#ifdef LTO
 	// only do work here if some llvm obj files where loaded
 	if ( ! _haveLLVMObjs )
 		return;
@@ -1407,6 +1410,9 @@ void Resolver::linkTimeOptimize()
 		// check new code does not override some dylib
 		this->checkDylibSymbolCollisions();
 	}
+#else
+  return;
+#endif
 }
 
 
diff --git a/ld/ld.cpp b/ld/ld.cpp
index a5db06e..fe3a950 100644
--- a/ld/ld.cpp
+++ b/ld/ld.cpp
@@ -83,7 +83,9 @@ extern "C" double log2 ( double );
 #include "parsers/archive_file.h"
 #include "parsers/macho_relocatable_file.h"
 #include "parsers/macho_dylib_file.h"
+#ifdef LTO
 #include "parsers/lto_file.h"
+#endif
 #include "parsers/opaque_section_file.h"
 
 
diff --git a/ld/parsers/archive_file.cpp b/ld/parsers/archive_file.cpp
index 708f1fb..6ea478c 100644
--- a/ld/parsers/archive_file.cpp
+++ b/ld/parsers/archive_file.cpp
@@ -39,7 +39,9 @@
 #include "Architectures.hpp"
 
 #include "macho_relocatable_file.h"
+#ifdef LTO
 #include "lto_file.h"
+#endif
 #include "archive_file.h"
 
 
@@ -91,8 +93,10 @@ public:
 private:
 	static bool										validMachOFile(const uint8_t* fileContent, uint64_t fileLength, 
 																	const mach_o::relocatable::ParserOptions& opts);
+#ifdef LTO
 	static bool										validLTOFile(const uint8_t* fileContent, uint64_t fileLength, 
 																	const mach_o::relocatable::ParserOptions& opts);
+#endif
 	static cpu_type_t								architecture();
 
 	class Entry : ar_hdr
@@ -231,11 +235,13 @@ bool File<A>::validMachOFile(const uint8_t* fileContent, uint64_t fileLength, co
 	return mach_o::relocatable::isObjectFile(fileContent, fileLength, opts);
 }
 
+#ifdef LTO
 template <typename A>
 bool File<A>::validLTOFile(const uint8_t* fileContent, uint64_t fileLength, const mach_o::relocatable::ParserOptions& opts)
 {
 	return lto::isObjectFile(fileContent, fileLength, opts.architecture, opts.subType);
 }
+#endif
 
 
 
@@ -256,7 +262,11 @@ bool File<A>::validFile(const uint8_t* fileContent, uint64_t fileLength, const m
 		if ( (p==start) && ((strcmp(memberName, SYMDEF_SORTED) == 0) || (strcmp(memberName, SYMDEF) == 0)) )
 			continue;
 		// archive is valid if first .o file is valid
-		return (validMachOFile(p->content(), p->contentSize(), opts) || validLTOFile(p->content(), p->contentSize(), opts));
+		return (validMachOFile(p->content(), p->contentSize(), opts)
+#ifdef LTO
+            || validLTOFile(p->content(), p->contentSize(), opts)
+#endif
+            );
 	}	
 	// empty archive
 	return true;
@@ -377,6 +387,7 @@ typename File<A>::MemberState& File<A>::makeObjectFileForMember(const Entry* mem
 			_instantiatedEntries[member] = state;
 			return _instantiatedEntries[member];
 		}
+#ifdef LTO
 		// see if member is llvm bitcode file
 		result = lto::parse(member->content(), member->contentSize(), 
 								mPath, member->modificationTime(), ordinal, 
@@ -386,6 +397,7 @@ typename File<A>::MemberState& File<A>::makeObjectFileForMember(const Entry* mem
 			_instantiatedEntries[member] = state;
 			return _instantiatedEntries[member];
 		}
+#endif
 			
 		throwf("archive member '%s' with length %d is not mach-o or llvm bitcode", memberName, member->contentSize());
 	}
diff --git a/other/ObjectDump.cpp b/other/ObjectDump.cpp
index cc673a3..7d4b171 100644
--- a/other/ObjectDump.cpp
+++ b/other/ObjectDump.cpp
@@ -33,7 +33,9 @@
 
 #include "MachOFileAbstraction.hpp"
 #include "parsers/macho_relocatable_file.h"
+#ifdef LTO
 #include "parsers/lto_file.h"
+#endif
 
 static bool			sDumpContent= true;
 static bool			sDumpStabs	= false;
@@ -1132,10 +1134,12 @@ static ld::relocatable::File* createReader(const char* path)
 	if ( objResult != NULL )
 		return objResult;
 
+#ifdef LTO
 	// see if it is an llvm object file
 	objResult = lto::parse(p, fileLen, path, stat_buf.st_mtime, ld::File::Ordinal::NullOrdinal(), sPreferredArch, sPreferredSubArch, false);
 	if ( objResult != NULL ) 
 		return objResult;
+#endif
 
 	throwf("not a mach-o object file: %s", path);
 #else
